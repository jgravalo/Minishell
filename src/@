#include "../inc/minishell.h"

//int	search_redir(char **args)

int	check_redir(char **args, int type)
{
	int fd;

	fd = open(args[i + 1], O_RDWR | O_CREAT | O_TRUNC, 00644); // > salida
	fd = open(args[i + 1], O_WRONLY); // < entrada
	fd = open(args[i + 1], O_RDWR | O_CREAT | O_APPEND, 00644); // >> salida
	if ()
	return ();
}

int	parse_line(char *line, char **envp, t_pipe *in, t_pipe *out)
//int	parse_line(char *line, char **envp)
{
	char	**args;
	char	*cmd;
	pid_t	pid;

//	write(1, line, ft_strlen(line));
//	write(1, "\n", 1);
//	line = check_vars(line, envp);
//	write(1, line, ft_strlen(line));
//	write(1, "\n", 1);
	args = ft_split_marks(line, ' ');
	/*
	int i;
	for (i = 0; args[i]; i++)
	{
		write(1, args[i], ft_strlen(args[i]));
		write(1, ", ", 2);
	}
	write(1, "\n", 1);
	*/
//	ft_strcmp(tmp, (char *){27, 91, 65});

	pid = fork();
	if (pid == 0)
	{
		//fd = check_redir(line); //si hay redireccion, borrarla de la linea
		if (in)
			dup2(in->p[0], 0);
		if (out)
			dup2(out->p[1], 1);
		cmd = file_cmd(args[0], envp);
		execve(cmd, args, envp);
	}
	waitpid(pid, NULL, 0);
	return (0);
}

int parse_pipex(char *line, char **envp)
{
	char	**pipes;
	int		i;
	int		pipex;
	t_pipe	*p;

	pipex = count_ascii(line, '|'); 
	pipes = ft_split(line, '|');
	if (pipex > 0)
	{
		p = (t_pipe *)malloc(sizeof(t_pipe) * (pipex + 1));
		pipe(p[0].p);
		parse_line(pipes[0], envp, NULL, &p[0]); //primer pipe
	}
	else 
		parse_line(pipes[0], envp, NULL, NULL); //sin pipe
	i = 1;
	while (pipex > 1 && pipes[i])
	{
		pipe(p[i].p);
		parse_line(pipes[i], envp, &p[i - 1], &p[i]);// pipe intermedio
		i++;
	}
	if (pipex > 0)
	{
		parse_line(pipes[i], envp, &p[i - 1], NULL); //ultimo pipe
	}
	return (0);
}

int parse_ands(char *line, char **envp)
{
	char	**ands;
	int		i;

	ands = ft_split(line, '&');//modificarlo para que parta con strings
	i = 0;
	while (ands[i])
	{
		parse_pipex(ands[i], envp);
		i++;
	}
	return (0);
}

int parse_ors(char *line, char **envp)
{
	char	**ors;
	int		i;

	ors = ft_split(line, '|');//modificarlo para que parta con strings
	i = 0;
	while (ors[i])
	{
		parse_ands(ors[i], envp);
		i++;
	}
	return (0);
}

int main(int argc, char **argv, char **envp)
{
	char	*c;
//	t_hist	history;

	if (!argc && !argv && !envp)
		return (0);
	while (1)
	{
//		write(1, "jgravalo> ", 10);
		c = readline("jgravalo> ");
//		c = get_next_line(0);
//		make_history(&history, c);
//		print_history(&history);
	
		write(1, "line = |", 8);
		write(1, c, ft_strlen(c));
		write(1, "|\n", 2);
		
		parse_pipex(c, envp);
//		parse_line(c, envp);
		free(c);
	}
//	print_history(&history);
	return (0);
}
